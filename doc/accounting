Accounting System

This is a double-entry accounting system. A work in progress, it could be made into a gem for others to extend and use in their applications.


DEBIT/CREDIT EQUATION

Using the standard accounting equation:

Normal Debit Balance Accounts = Normal Credit Balance Accounts

Which expands into:

Assets + Draws + Expenses = Liabilities + Beginning Capital + Revenue

This looks totally bizarre unless you look at the equation as a historical record of the business. The current assets plus what was taken out of those assets (draws and expenses) equals what was owed to other people (liabilities) plus what was originally contributed (beginning capital) plus any income that came in (revenue).

So if we store the amounts correctly in the database, we can easily check the integrity of the database by summing all amounts and testing for zero. "Store the amounts correctly in the database" means when two entries are stored and they are both stored in normal debit balance accounts (or both stored in normal credit balance accounts), those two amounts must be opposite in sign. Whereas if two entries are stored and one is stored in a normal debit balance account and the other stored in a normal credit balance accounts, those two amounts must have the same sign.

First Account     Second Account
===============   ===============
debit account     debit account
(+)               (-)

credit account    credit account
(+)               (-)

debit account     credit account
(+)               (+)

credit account    debit account
(+)               (+)

In that way:
  the postings for all normal debit balance accounts sum to zero,
  the postings for all normal credit balance accounts sum to zero, and
  the sum of all postings for all normal debit balance accounts equals the sum of all postings for all normal credit balance accounts.


TABLES

Accounts
An Account has_many Accounts as subaccounts. An Account has_many Journals.

Postings
Postings belong_to an Account and belong_to a Journal. A Posting represents either a credit or a debit for an account.

Journals
A Journal has_many Postings. All postings associated with a journal must sum to zero.

Batches (not implemented at this time)
A Batch has_many Journals. A Batch controls the immutability of Postings associated with Journals. A Batch record can be open or closed. When a Journal is created, it will associate itself (belong_to) the first open Batch it can find. If no Batches are open, a new Batch is created, opened and the Journal now belongs to that Batch.

Reconciles (not implemented at this time)
A Reconcile record belongs to an Account and to a Posting. Initially, Reconcile records belong only to an Account but then belong to a Posting when that Reconcile is associated to a Posting. The relation between Reconcile and Posting is a HABTM so that a Reconcile can have many Postings and a Posting can have many Reconciles. This allows a Reconcile record to be made up of many Postings and vice-versa.


FEATURES AND CAPABILITIES

Journals should balance before saving.

Postings should indicate one of three states: uncleared, cleared and reconciled.

Reconciling an account involves the association of Reconciles with Postings and vice-versa. The system may auto-associate Reconciles with Postings based on amounts and transaction dates (future capability).


INTERFACE TO APPLICATIONS

The accounting system may receive input from an application. That input should be traceable back to a specific model record in the application. A HABTM table could be added to link Journal records to application records. That way, a Posting may be traced back to a record in the application (for example, a contract, a contract_line_item, a timecard or a transaction).


MORE INFORMATION

Reference "double-entry account system" blog posting at:
http://www.cuppadev.co.uk/oldbrew/double-entry-accounting-in-rails/
and
http://homepages.tcp.co.uk/~m-wigley/gc_wp_ded.html
and
http://www.dwmbeancounter.com/tutorial/Tutorial.html